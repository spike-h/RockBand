'''
This script is used to decode the image data from a C header file generated by the picture.py script.
It reads the header file, extracts the pixel data, and saves it as a PNG image. The script uses the PIL library to handle image creation and saving. The main function takes two command-line arguments: the input header file and the output PNG file. It reads the header file, extracts the pixel data, and creates a PNG image from it.
'''

import os
import sys
from PIL import Image
import numpy as np
import argparse

palette = [
    (0, 0, 0), (0, 187, 0), (0, 132, 0), (0, 255, 0),
    (0, 0, 255), (0, 187, 255), (0, 132, 255), (0, 255, 255),
    (255, 0, 0), (255, 187, 0), (255, 132, 9), (255, 255, 0),
    (255, 0, 255), (255, 187, 255), (255, 132, 255), (255, 255, 255)
]

def decode_vga_image(header_path, output_path):
    # Check if the header file exists
    if not os.path.isfile(header_path):
        print(f"Header file {header_path} does not exist.")
        return

    # Read the header file and extract pixel data
    with open(header_path, 'r') as f:
        lines = f.readlines()

    # Extract pixel data from the header file
    pixel_data = []
    for line in lines:
        if line.startswith('const unsigned short vga_image'):
            continue
        # check if the line contains pixel data and not a comment or other code
        if line.startswith('//') or line.startswith('#'):
            continue
        elif line.startswith('};'):
            break
        else:
            # Remove curly braces and split
            line = line.strip().strip(',')
            if line:
                pixel_data.append([int(color) for color in line.strip('{}').split(',')])

    # Convert pixel data to a NumPy array
    pixel_data = np.array(pixel_data, dtype=np.uint16)

    # Map the indices in pixel_data to RGB values using the palette
    rgb_data = np.array(palette, dtype=np.uint8)[pixel_data]

    # Create an image from the RGB data
    img = Image.fromarray(rgb_data, 'RGB')

    # Save the image as a PNG file
    img.save(output_path)
    print(f"Image saved to {output_path}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Decode a VGA image from a C header file.')
    parser.add_argument('header_path', type=str, help='Path to the input C header file.')
    parser.add_argument('output_path', type=str, help='Path to the output PNG file.')
    args = parser.parse_args()

    decode_vga_image(args.header_path, args.output_path)
    # Example usage:
    # decode_vga_image('output_image.h', 'decoded_image.png')
    # Terminal command:
    # python picture_decode.py output_image.h decoded_image.png